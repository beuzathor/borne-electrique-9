---
import ConfiguratorStep from './ConfiguratorStep.astro';
import { steps } from './configuratorData';
---

<div class="max-w-3xl mx-auto">
  <div id="configurator" class="bg-white rounded-2xl shadow-lg p-8">
    <div id="steps">
      <ConfiguratorStep step={steps[0]} />
    </div>

    <div id="result" class="hidden">
      <div class="text-center mb-8">
        <h3 class="text-2xl font-bold text-gray-900 mb-4">Votre solution recommandée</h3>
        <p class="text-gray-600">Basée sur vos réponses, voici la configuration que nous vous recommandons :</p>
      </div>

      <div id="recommendation" class="space-y-6">
        <!-- Rempli dynamiquement -->
      </div>

      <div class="mt-8 text-center">
        <button 
          id="restartButton"
          class="px-6 py-3 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition-colors"
        >
          Recommencer la configuration
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { steps, type Answer } from './configuratorData';
  import { calculateRecommendation } from './recommendationEngine';

  let currentStepIndex = 0;
  const answers: Answer[] = [];

  function showStep(index: number) {
    const stepsContainer = document.getElementById('steps');
    if (!stepsContainer) return;

    const step = steps[index];
    stepsContainer.innerHTML = `
      <div class="mb-8">
        <div class="flex justify-between text-sm text-gray-600 mb-2">
          <span>Étape ${index + 1}/${steps.length}</span>
          <span class="text-indigo-600 font-medium">${Math.round(((index + 1)/steps.length) * 100)}%</span>
        </div>
        <div class="h-2 bg-gray-200 rounded-full">
          <div 
            class="h-full bg-indigo-600 rounded-full transition-all duration-300"
            style="width: ${((index + 1)/steps.length) * 100}%"
          ></div>
        </div>
      </div>

      <h3 class="text-xl font-bold text-gray-900 mb-6">${step.question}</h3>

      <div class="space-y-4">
        ${step.options.map((option, optionIndex) => `
          <button
            class="w-full text-left p-4 rounded-xl border-2 border-gray-200 hover:border-indigo-500 hover:bg-indigo-50 transition-all duration-200"
            data-index="${optionIndex}"
          >
            <div class="flex items-center">
              <span class="flex-1">
                <span class="font-medium text-gray-900">${option.label}</span>
                ${option.description ? `
                  <span class="block text-sm text-gray-500 mt-1">${option.description}</span>
                ` : ''}
              </span>
              <svg class="w-5 h-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </div>
          </button>
        `).join('')}
      </div>
    `;

    // Add click handlers
    const buttons = stepsContainer.querySelectorAll('button');
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const optionIndex = parseInt(button.dataset.index || '0');
        handleAnswer(step.id, step.options[optionIndex]);
      });
    });
  }

  function handleAnswer(questionId: string, answer: { value: string, label: string }) {
    answers.push({ questionId, value: answer.value, label: answer.label });
    
    if (currentStepIndex < steps.length - 1) {
      currentStepIndex++;
      showStep(currentStepIndex);
    } else {
      showResult();
    }
  }

  function showResult() {
    const stepsContainer = document.getElementById('steps');
    const resultContainer = document.getElementById('result');
    const recommendationContainer = document.getElementById('recommendation');
    
    if (!stepsContainer || !resultContainer || !recommendationContainer) return;

    stepsContainer.classList.add('hidden');
    resultContainer.classList.remove('hidden');

    const recommendation = calculateRecommendation(answers);
    recommendationContainer.innerHTML = `
      <div class="bg-indigo-50 rounded-xl p-6">
        <h4 class="text-lg font-semibold text-indigo-900 mb-2">${recommendation.title}</h4>
        <p class="text-indigo-700 mb-4">${recommendation.description}</p>
        <ul class="space-y-2 text-gray-700">
          ${recommendation.features.map(feature => `
            <li class="flex items-start">
              <svg class="w-5 h-5 text-indigo-500 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              ${feature}
            </li>
          `).join('')}
        </ul>
      </div>

      <div class="bg-gray-50 rounded-xl p-6 mt-6">
        <h4 class="text-lg font-semibold text-gray-900 mb-4">Résumé de vos besoins</h4>
        <ul class="space-y-3">
          ${answers.map(answer => `
            <li class="flex items-start text-gray-700">
              <svg class="w-5 h-5 text-gray-400 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
              ${answer.label}
            </li>
          `).join('')}
        </ul>
      </div>
    `;
  }

  // Initialize configurator
  document.addEventListener('DOMContentLoaded', () => {
    showStep(0);

    // Add restart handler
    const restartButton = document.getElementById('restartButton');
    if (restartButton) {
      restartButton.addEventListener('click', () => {
        const stepsContainer = document.getElementById('steps');
        const resultContainer = document.getElementById('result');
        
        if (!stepsContainer || !resultContainer) return;

        currentStepIndex = 0;
        answers.length = 0;
        
        stepsContainer.classList.remove('hidden');
        resultContainer.classList.add('hidden');
        
        showStep(0);
      });
    }
  });
</script>