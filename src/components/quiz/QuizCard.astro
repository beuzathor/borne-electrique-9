---
interface Props {
  currentQuestion: number;
  totalQuestions: number;
  question: string;
  options: string[];
  isAnswered: boolean;
  selectedAnswer?: number;
  correctAnswer: number;
  explanation: string;
}

const { 
  currentQuestion,
  totalQuestions,
  question,
  options,
  isAnswered,
  selectedAnswer,
  correctAnswer,
  explanation
} = Astro.props;
---
<div class="bg-white rounded-2xl shadow-lg p-6 max-w-2xl mx-auto">
  <!-- Progress -->
  <div class="mb-6">
    <div class="flex justify-between text-sm text-gray-600 mb-2">
      <span>Question {currentQuestion}/{totalQuestions}</span>
      <span class="text-indigo-600 font-medium">{Math.round((currentQuestion/totalQuestions) * 100)}%</span>
    </div>
    <div class="h-2 bg-gray-200 rounded-full">
      <div 
        class="h-full bg-indigo-600 rounded-full transition-all duration-300"
        style={`width: ${(currentQuestion/totalQuestions) * 100}%`}
      ></div>
    </div>
  </div>

  <!-- Question -->
  <h3 class="text-xl font-bold text-gray-900 mb-6">{question}</h3>

  <!-- Options -->
  <div class="space-y-3">
    {options.map((option, index) => (
      <button
        class={`w-full text-left p-4 rounded-xl border-2 transition-all duration-200 ${
          isAnswered
            ? index === correctAnswer
              ? 'border-green-500 bg-green-50'
              : index === selectedAnswer
                ? 'border-red-500 bg-red-50'
                : 'border-gray-200'
            : 'border-gray-200 hover:border-indigo-500 hover:bg-indigo-50'
        }`}
        data-index={index}
      >
        <div class="flex items-center">
          <span class="w-8 h-8 rounded-full border-2 border-current flex items-center justify-center mr-3 
            ${isAnswered
              ? index === correctAnswer
                ? 'text-green-500'
                : index === selectedAnswer
                  ? 'text-red-500'
                  : 'text-gray-400'
              : 'text-gray-400'
            }">
            {String.fromCharCode(65 + index)}
          </span>
          <span class={`flex-1 ${
            isAnswered
              ? index === correctAnswer
                ? 'text-green-700'
                : index === selectedAnswer
                  ? 'text-red-700'
                  : 'text-gray-500'
              : 'text-gray-700'
          }`}>
            {option}
          </span>
          {isAnswered && index === correctAnswer && (
            <svg class="w-6 h-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          )}
        </div>
      </button>
    ))}
  </div>

  <!-- Explanation -->
  {isAnswered && (
    <div class="mt-6 p-4 bg-blue-50 rounded-xl">
      <p class="text-blue-700">{explanation}</p>
    </div>
  )}
</div>